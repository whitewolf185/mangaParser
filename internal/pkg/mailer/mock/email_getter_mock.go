// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/whitewolf185/mangaparser/internal/pkg/mailer (interfaces: EmailGetter)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockEmailGetter is a mock of EmailGetter interface.
type MockEmailGetter struct {
	ctrl     *gomock.Controller
	recorder *MockEmailGetterMockRecorder
}

// MockEmailGetterMockRecorder is the mock recorder for MockEmailGetter.
type MockEmailGetterMockRecorder struct {
	mock *MockEmailGetter
}

// NewMockEmailGetter creates a new mock instance.
func NewMockEmailGetter(ctrl *gomock.Controller) *MockEmailGetter {
	mock := &MockEmailGetter{ctrl: ctrl}
	mock.recorder = &MockEmailGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailGetter) EXPECT() *MockEmailGetterMockRecorder {
	return m.recorder
}

// GetEmailByID mocks base method.
func (m *MockEmailGetter) GetEmailByID(arg0 context.Context, arg1 uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailByID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailByID indicates an expected call of GetEmailByID.
func (mr *MockEmailGetterMockRecorder) GetEmailByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailByID", reflect.TypeOf((*MockEmailGetter)(nil).GetEmailByID), arg0, arg1)
}
