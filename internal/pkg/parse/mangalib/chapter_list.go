package mangalib

import (
	"context"
	"encoding/json"
	"fmt"
	"sort"
	"strconv"
	"strings"

	"github.com/PuerkitoBio/goquery"
	"github.com/google/uuid"
	"github.com/pkg/errors"

	
	"github.com/whitewolf185/mangaparser/internal/config"
	httprequester "github.com/whitewolf185/mangaparser/internal/pkg/parse/http_requester"
)

const chapterTemplate = mangalibHost + "%s/v%d/c%s"

// UrlGetter интерфейс для получения url для парсинга
//
//go:generate mockgen -destination=./mock/url_getter_mock.go -package=mock github.com/whitewolf185/mangaparser/internal/pkg/parse/mangalib UrlGetter
type UrlGetter interface {
	GetUrlByID(ctx context.Context, mangaID uuid.UUID, sourceType config.MangaSourceType) (string, error)
}

type chapterListStruct struct {
	Number string `json:"chapter_number"`
	Volume int	  `json:"chapter_volume"`
}

// GetChapterListUrl получает список url глав
func (mlc mangaLibController) GetChapterListUrl(ctx context.Context, mangaID uuid.UUID) ([]string, error) {
	mainMangaUrl, err := mlc.urlGetter.GetUrlByID(ctx, mangaID, config.MangaLib)
	if err != nil{
		return nil, errors.Wrap(err, "cannot get main manga url with chapter list")
	}

	doc, err := httprequester.GetDOM(mainMangaUrl)
	if err != nil {
		return nil, errors.Wrap(err, "chapter list")
	}

	mangaName := mlc.getMangaName(mainMangaUrl)
	chapterList, err := mlc.getChapterListFromBody(doc)
	if err != nil {
		return nil, errors.Wrap(err, "getting chapter list failure")
	}

	result := make([]string, 0, len(chapterList))
	for _, chapter := range chapterList {
		result = append(result, fmt.Sprintf(chapterTemplate, mangaName, chapter.Volume, chapter.Number))
	}

	return result, nil
}

// to marshal scruct
type autoGenerated struct {
	Chapters chapters `json:"chapters"`
}
type chapters struct {
	List []chapterListStruct `json:"list"`
}
func (cls chapters) compare(i, j int) bool {
	lhs, _ := strconv.ParseFloat(cls.List[i].Number, 32)
	rhs, _ := strconv.ParseFloat(cls.List[j].Number, 32)
	return lhs < rhs
}
// to marshal struct end


func (mlc mangaLibController) getChapterListFromBody(doc *goquery.Document) ([]chapterListStruct, error) {
	chapterInfo := doc.Find("script").Text()
	// cleaning json from specific symbols
	indexToSlice := strings.Index(chapterInfo, "window._SITE_COLOR_")
	chapterInfo = chapterInfo[:indexToSlice]
	chapterInfo = strings.ReplaceAll(chapterInfo, "window.__DATA__ = ", "")
	chapterInfo = mlc.cleanScript(chapterInfo)

	var parsedChaptersInfo autoGenerated
	err := json.Unmarshal([]byte(chapterInfo), &parsedChaptersInfo)
	if err != nil {
		return nil, errors.Wrap(err, "unmarshal chapter info error")
	}

	sort.Slice(parsedChaptersInfo.Chapters.List, parsedChaptersInfo.Chapters.compare)

	return parsedChaptersInfo.Chapters.List, nil
}