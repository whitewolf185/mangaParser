//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Subscribers = newSubscribersTable("public", "subscribers", "")

type subscribersTable struct {
	postgres.Table

	//Columns
	ID       postgres.ColumnInteger
	PersonID postgres.ColumnString
	MangaID  postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SubscribersTable struct {
	subscribersTable

	EXCLUDED subscribersTable
}

// AS creates new SubscribersTable with assigned alias
func (a SubscribersTable) AS(alias string) *SubscribersTable {
	return newSubscribersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SubscribersTable with assigned schema name
func (a SubscribersTable) FromSchema(schemaName string) *SubscribersTable {
	return newSubscribersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SubscribersTable with assigned table prefix
func (a SubscribersTable) WithPrefix(prefix string) *SubscribersTable {
	return newSubscribersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SubscribersTable with assigned table suffix
func (a SubscribersTable) WithSuffix(suffix string) *SubscribersTable {
	return newSubscribersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSubscribersTable(schemaName, tableName, alias string) *SubscribersTable {
	return &SubscribersTable{
		subscribersTable: newSubscribersTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newSubscribersTableImpl("", "excluded", ""),
	}
}

func newSubscribersTableImpl(schemaName, tableName, alias string) subscribersTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		PersonIDColumn = postgres.StringColumn("person_id")
		MangaIDColumn  = postgres.StringColumn("manga_id")
		allColumns     = postgres.ColumnList{IDColumn, PersonIDColumn, MangaIDColumn}
		mutableColumns = postgres.ColumnList{PersonIDColumn, MangaIDColumn}
	)

	return subscribersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		PersonID: PersonIDColumn,
		MangaID:  MangaIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
